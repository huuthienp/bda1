# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import DBSCAN
from scipy import stats
import matplotlib.pyplot as plt

def prepare_data_dbscan(combined_df, df_pp):
    le = LabelEncoder()
    categories_numeric = le.fit_transform(combined_df['category'])
    features = ['current_price', 'raw_price', 'discount', 'likes_count']
    df_db = df_pp[features].copy()

    # Calculate Z-scores and filter outliers
    z_scores = np.abs(stats.zscore(df_db))
    threshold = 3
    non_outliers = (z_scores < threshold).all(axis=1)
    df_db = df_db[non_outliers]
    categories_filtered = categories_numeric[non_outliers]
    
    return df_db.copy(), categories_filtered, le.classes_

class DBSCANExperiment:
    def __init__(self, df_db, categories_filtered, category_names):
        self.df_db = df_db
        self.categories_filtered = categories_filtered
        self.category_names = category_names
        self.labels = None

    def perform_clustering(self):
        db = DBSCAN(eps=0.5, min_samples=35).fit(self.df_db)
        self.labels = db.labels_
        self.df_db['Cluster'] = self.labels

    def plot_clusters(self, custom_view=False):
        fig = plt.figure(figsize=(10, 7))
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(self.df_db['raw_price'], self.df_db['likes_count'], self.df_db['discount'], c=self.df_db['Cluster'], cmap='rainbow')
        ax.set_xlabel('Raw Price')
        ax.set_ylabel('Likes count')
        ax.set_zlabel('Discount')
        plt.title('3D Plot of DBSCAN Clusters')
        
        if custom_view:
            ax.view_init(elev=20., azim=30)
        
        plt.show()

    def plot_detailed_clusters(self):
        fig = plt.figure(figsize=(12, 8))
        ax = fig.add_subplot(111, projection='3d')

        # Create a list of markers for different categories
        markers = ['o', '^', 's', 'p', '*', '+', 'x', 'D', '|']
        
        # Map the numerical categories to markers
        category_markers = np.array([markers[i % len(markers)] for i in self.categories_filtered])

        for cluster in np.unique(self.labels):
            if cluster == -1:  # Skip noise points if needed
                continue

            for i, marker in enumerate(markers):
                cluster_points = (self.labels == cluster) & (category_markers == marker)
                ax.scatter(self.df_db.loc[cluster_points, 'raw_price'],
                           self.df_db.loc[cluster_points, 'likes_count'],
                           self.df_db.loc[cluster_points, 'discount'],
                           label=f'Cluster {cluster}, {self.category_names[i]}',
                           marker=marker)
        
        ax.set_xlabel('Raw Price')
        ax.set_ylabel('Likes count')
        ax.set_zlabel('Discount')
        ax.set_title('3D Plot of DBSCAN Clusters with Categories')
        ax.legend(loc='upper left', bbox_to_anchor=(1.05, 1), fontsize='small')
        plt.show()

if __name__ == '__main__':
    # Example usage
    from robbie import DataReader, DataPreProcesser
    # define path variables
    zip_file_dir = "A1_2024_Released.zip"
    csv_dir = "A1_2024_Unzip"
    
    # obtain the data
    data_reader = DataReader(zip_file_dir, csv_dir)
    combined_df = data_reader.combined_df
    dpp = DataPreProcesser(combined_df)
    df_pp = dpp.df
    # combined_df = pd.DataFrame()  # Replace with actual DataFrame
    # df_pp = pd.DataFrame()        # Replace with actual DataFrame

    # Preprocess the data
    df_db, categories_filtered, category_names = prepare_data_dbscan(combined_df, df_pp)
    print(df_db)

    # Perform clustering and plot
    DSCE = DBSCANExperiment(df_db, categories_filtered, category_names)
    DSCE.perform_clustering()
    print(df_db)
    DSCE.plot_clusters()  # Set custom_view to True for specific view angle
    DSCE.plot_clusters(custom_view=True)  # Set custom_view to True for specific view angle
    DSCE.plot_detailed_clusters()  # Plot with detailed category markers

# # Convert categories to numerical values
# le = LabelEncoder()
# categories_numeric = le.fit_transform(combined_df['category'])

# features = ['current_price', 'raw_price', 'discount', 'likes_count']
# df_db = df_pp[features].copy()

# # Calculate the Z-scores of the data
# z_scores = np.abs(stats.zscore(df_db))

# # Set a threshold for identifying outliers
# threshold = 3

# # Identify the rows that are not outliers (Z-score less than the threshold)
# non_outliers = (z_scores < threshold).all(axis=1)

# # Filter out the outliers
# df_db = df_db[non_outliers].copy()

# categories_filtered = categories_numeric[non_outliers]

# print(df_db)

# db = DBSCAN(eps=0.5, min_samples=35).fit(df_db)
# labels = db.labels_

# # Add the labels to your original DataFrame
# df_db['Cluster'] = labels

# print(df_db)

# import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D

# fig = plt.figure(figsize=(10, 7))
# ax = fig.add_subplot(111, projection='3d')

# # Use three features for the 3D plot
# ax.scatter(df_db['raw_price'], df_db['likes_count'], df_db['discount'], c=df_db['Cluster'], cmap='rainbow')

# ax.set_xlabel('Raw Price')
# ax.set_ylabel('Likes count')
# ax.set_zlabel('Discount')
# plt.title('3D Plot of DBSCAN Clusters')
# plt.savefig('3D_plot1.png')
# plt.show()

# fig = plt.figure(figsize=(10, 7))
# ax = fig.add_subplot(111, projection='3d')

# # Use three features for the 3D plot
# ax.scatter(df_db['raw_price'], df_db['likes_count'], df_db['discount'], c=df_db['Cluster'], cmap='rainbow')

# ax.set_xlabel('Raw Price')
# ax.set_ylabel('Likes count')
# ax.set_zlabel('Discount')
# plt.title('3D Plot of DBSCAN Clusters')
# # Set different angles for a better view
# ax.view_init(elev=20., azim=30)
# plt.savefig('3D_plot2.png')
# plt.show()



# fig = plt.figure(figsize=(12, 8))
# ax = fig.add_subplot(111, projection='3d')
# Automatically get the list of original category names
# category_names = list(le.classes_)

# # Create a list of markers for different categories
# markers = ['o', '^', 's', 'p', '*', '+', 'x', 'D', '|']

# # Map the numerical categories to markers
# category_markers = np.array([markers[i % len(markers)] for i in categories_filtered])

# for cluster in np.unique(labels):
#     if cluster == -1:  # Skip noise points if needed
#         continue

#     for i, marker in enumerate(markers):
#         cluster_points = (labels == cluster) & (category_markers == marker)
#         ax.scatter(df_db.loc[cluster_points, 'raw_price'],
#                    df_db.loc[cluster_points, 'likes_count'],
#                    df_db.loc[cluster_points, 'discount'],
#                    label=f'Cluster {cluster}, {category_names[i]}',
#                    marker=marker)

# ax.set_xlabel('Raw Price')
# ax.set_ylabel('Likes count')
# ax.set_zlabel('Discount')
# ax.set_title('3D Plot of DBSCAN Clusters with Categories')
# plt.savefig('3D_plot3.png')
# ax.legend(loc='upper left', bbox_to_anchor=(1.05, 1), fontsize='small')
# plt.show()